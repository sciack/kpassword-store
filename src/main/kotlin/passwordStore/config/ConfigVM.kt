package passwordStore.config

import com.zaxxer.hikari.HikariDataSource
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import mu.KotlinLogging
import org.apache.commons.codec.binary.Base64
import passwordStore.crypto.IV_STRING
import passwordStore.crypto.SECRET_KEY
import passwordStore.crypto.Secrets
import passwordStore.sql.DB_PASSWORD
import passwordStore.sql.JDBC_URL
import java.nio.file.Path
import java.util.*
import kotlin.io.path.absolutePathString
import kotlin.io.path.reader
import kotlin.io.path.writer

class ConfigVM(private val configFile: Path, private val secrets: Secrets, private val dataSource: HikariDataSource) {


    lateinit var jdbcUrl: String
    lateinit var dbPassword: String
    lateinit var secret: String
    lateinit var ivSpec: String
    var darkMode: Boolean? = null

    private val properties: Properties = Properties()

    init {
        configFile.reader().use {
            properties.load(it)
        }
        reset()
    }


    fun reset() {
        jdbcUrl = properties.getProperty(JDBC_URL, dataSource.jdbcUrl)
        dbPassword = properties.getProperty(DB_PASSWORD, "default")
        secret = String(
            Base64.decodeBase64(
                properties.getProperty(
                    SECRET_KEY,
                    Base64.encodeBase64String(secrets.passphrase())
                )
            )
        )
        ivSpec = String(
            Base64.decodeBase64(
                properties.getProperty(
                    IV_STRING,
                    Base64.encodeBase64String(secrets.ivString())
                )
            )
        )
        darkMode = properties.getProperty(DARK_MODE)?.toBoolean()
    }

    suspend fun save() {
        properties.setProperty(JDBC_URL, jdbcUrl)
        properties.setProperty(DB_PASSWORD, dbPassword)
        properties.setProperty(SECRET_KEY, Base64.encodeBase64String(secret.toByteArray()))
        properties.setProperty(IV_STRING, Base64.encodeBase64String(ivSpec.toByteArray()))
        darkMode?.apply {
            properties.setProperty(DARK_MODE, this.toString())
        }
        withContext(Dispatchers.IO) {
            LOGGER.warn { "Saving properties in file ${configFile.absolutePathString()}" }
            configFile.writer().use {
                properties.store(it, "Generated by Password Store save")
            }
        }
    }

    companion object {
        val LOGGER = KotlinLogging.logger { }
    }
}

const val DARK_MODE = "DARK_MODE"