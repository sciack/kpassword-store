package passwordStore.config

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import cafe.adriel.voyager.core.model.ScreenModel
import com.zaxxer.hikari.HikariDataSource
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.apache.commons.codec.binary.Base64
import passwordStore.LOGGER
import passwordStore.crypto.IV_STRING
import passwordStore.crypto.SECRET_KEY
import passwordStore.crypto.Secrets
import passwordStore.sql.DB_PASSWORD
import passwordStore.sql.JDBC_URL
import java.nio.file.Path
import java.util.*
import kotlin.io.path.absolutePathString
import kotlin.io.path.reader
import kotlin.io.path.writer

class ConfigVM(private val configFile: Path, private val secrets: Secrets, private val dataSource: HikariDataSource) :
    ScreenModel {


    lateinit var jdbcUrl: String
    lateinit var dbPassword: String
    lateinit var secret: String
    lateinit var ivSpec: String
    val darkMode = mutableStateOf(DarkModes.SYSTEM_DEFAULT)

    private val properties: Properties = Properties()

    init {
        configFile.reader().use {
            properties.load(it)
        }
        reset()
    }


    fun reset() {
        jdbcUrl = properties.getProperty(JDBC_URL, dataSource.jdbcUrl)
        dbPassword = properties.getProperty(DB_PASSWORD, "default")
        secret = String(
            Base64.decodeBase64(
                properties.getProperty(
                    SECRET_KEY,
                    Base64.encodeBase64String(secrets.passphrase())
                )
            )
        )
        ivSpec = String(
            Base64.decodeBase64(
                properties.getProperty(
                    IV_STRING,
                    Base64.encodeBase64String(secrets.ivString())
                )
            )
        )
        val mode = properties.getProperty(DARK_MODE)?.let {
            runCatching {
                DarkModes.valueOf(it)
            }.getOrNull()
        } ?: DarkModes.SYSTEM_DEFAULT
        darkMode.value = mode
    }

    suspend fun save() {
        properties.setProperty(JDBC_URL, jdbcUrl)
        properties.setProperty(DB_PASSWORD, dbPassword)
        properties.setProperty(SECRET_KEY, Base64.encodeBase64String(secret.toByteArray()))
        properties.setProperty(IV_STRING, Base64.encodeBase64String(ivSpec.toByteArray()))
        properties.setProperty(DARK_MODE, darkMode.value.name)
        withContext(Dispatchers.IO) {
            LOGGER.warn { "Saving properties in file ${configFile.absolutePathString()}" }
            configFile.writer().use {
                properties.store(it, "Generated by Password Store save")
            }
        }
    }
}

const val DARK_MODE = "DARK_MODE"

enum class DarkModes {
    DARK,
    LIGHT,
    SYSTEM_DEFAULT;

    @Composable
    fun isDarkMode(): Boolean = when (this) {
        DARK -> true
        LIGHT -> false
        SYSTEM_DEFAULT -> isSystemInDarkTheme()
    }
}
